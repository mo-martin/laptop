#!/bin/sh

# Welcome to the Sparta laptop script!

fancy_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

fancy_echo "Welcome to the Sparta macOS Installer"
echo "-------------------------------------"
echo

# Get admin password & store in $passwd
echo -n "Admin Password: "
stty -echo
read passwd
stty echo
echo


# Exit if any subprocess returns non-zero.
# set -e

# OSX Settings
fancy_echo "Setting desktop background..."
curl https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/avatar.jpg > "$HOME/Pictures/avatar.jpg"
curl https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/desktop-bg.png > "$HOME/Pictures/desktop-bg.png"
osascript <<EOD
  tell application "Finder"
    set desktop picture to "$HOME/Pictures/desktop-bg.png" as POSIX file
  end tell
EOD

# Set faster Key Repeat
defaults write -g KeyRepeat -int 0

# Disable press-and-hold and enable KeyRepeat instead
defaults write -g ApplePressAndHoldEnabled -bool false


###### ENABLE THESE FOR TRUSTED USERS ONLY ######
# Disable Gatekeepr - http://osxdaily.com/2015/05/04/disable-gatekeeper-command-line-mac-osx/
#echo $passwd | sudo -S -k spctl --master-disable
# Disable System Integrity Protection (rootless)
#echo $passwd | sudo -S -k csrutil disable
#################################################


# Profile Picture
fancy_echo "Setting user avatar..."
# sudo dscl /Local/Default -delete /Users/$USER Picture
# sudo dscl /Local/Default create $HOME Picture "$HOME/Pictures/avatar.jpg"

echo "0x0A 0x5C 0x3A 0x2C dsRecTypeStandard:Users 4 dsAttrTypeStandard:RecordName externalbinary:dsAttrTypeStandard:JPEGPhoto dsAttrTypeStandard:UniqueID dsAttrTypeStandard:PrimaryGroupID dsAttrTypeStandard:GeneratedUID" > $HOME/avatar_import.txt
echo $USER:$HOME/Pictures/avatar.jpg:$UID:$(id -g):$(dscl . -read /Users/$USER GeneratedUID | cut -d' ' -f2) >> $HOME/avatar_import.txt
echo $passwd | sudo -S -k dscl . -delete /Users/$USER JPEGPhoto
echo $passwd | sudo -S -k dsimport $HOME/avatar_import.txt /Local/Default M -u diradmin
rm -f $HOME/avatar_import.txt

# Install tccutil and add terminal to list of allowed assistive devices
curl -O https://raw.githubusercontent.com/jacobsalmela/tccutil/master/tccutil.py
echo $passwd | sudo -S -k python ./tccutil.py --verbose --insert com.apple.Terminal




# Install Homebrew
fancy_echo "Creating ~/.bin folder..."
if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    echo $passwd | sudo -S -k chown -R "$LOGNAME:admin" /usr/local
  fi
else
  echo $passwd | sudo -S -k mkdir "$HOMEBREW_PREFIX"
  echo $passwd | sudo -S -k chflags norestricted "$HOMEBREW_PREFIX"
  echo $passwd | sudo -S -k chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask..."
  brew uninstall --force brew-cask
  brew cleanup
  brew cask cleanup
fi

brew tap caskroom/cask
brew tap caskroom/fonts

fancy_echo "Updating Homebrew formulae..."
brew update

fancy_echo "Installing sparta libs and tools..."
brew install openssl libxml2 libyaml ctags git vim heroku-toolbelt hub imagemagick curl chromedriver httpie node

# Install Ruby
fancy_echo "Installing rbenv..."
brew install rbenv ruby-build rbenv-default-gems

# Install Databases
fancy_echo "Installing database tools..."
brew install postgres redis sqlite mongodb mysql
brew services start mysql

fancy_echo "Installing GUI tools with brew cask..."

# Install Cask Fonts
brew cask install font-source-code-pro
brew cask install font-inconsolata
brew cask install font-ubuntu
brew cask install font-source-sans-pro

echo $passwd | sudo -S -k brew cask install virtualbox vagrant google-chrome firefox github-desktop slack

# Text Editors
echo $passwd | sudo -S -k brew cask install sublime-text atom

# Java JDK
echo $passwd | sudo -S -k brew cask install java

# Cleanup
brew cleanup
brew cask cleanup

# Install Ruby
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"

fancy_echo "Installing and Configuring rbenv and ruby..."

# append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

# Set Default rubygems to include in all ruby installations via rbenv
fancy_echo "Setting default gems..."

cat > "$HOME/.rbenv/default-gems" <<-EOF
bundler
brice
gist
pry
pry-doc
awesome_print
specific_install
EOF

if ! rbenv versions | grep -Fq "$ruby_version"; then
  fancy_echo "Installing ruby $ruby_version..."
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
gem_install_or_update 'brice'
gem_install_or_update 'pry'
gem_install_or_update 'pry-doc'
gem_install_or_update 'awesome_print'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

# Clone down dotfiles
fancy_echo "Installing dotfiles..."
cd $HOME
curl -O https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/dotfiles/.bash_profile
curl -O https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/dotfiles/.vimrc
curl -O https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/dotfiles/.pryrc
curl -O https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/dotfiles/.irbrc
curl -O https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/dotfiles/.gitconfig
curl -O https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/dotfiles/.git_status_in_prompt.sh
fancy_echo "dotfiles done!"

# Update NPM
fancy_echo "Updating NPM..."
npm update npm -g
npm update -g

# Install vim-plug

echo "Installing Vim Plug..."

curl -fLo "$HOME/.vim/autoload/plug.vim" --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fancy_echo "Running VimPlug Commands..."

vim :silent! +PlugInstall +qall
vim :silent! +PlugClean +qall


# Install MySQL Workbench
fancy_echo "Installing MySQL Workbench..."
temp=$TMPDIR$(uuidgen)
mkdir -p $temp/mount
curl -s http://cdn.mysql.com//Downloads/MySQLGUITools/mysql-workbench-community-6.3.7-osx-x86_64.dmg > $temp/1.dmg
yes | hdiutil attach -noverify -nobrowse -mountpoint $temp/mount $temp/1.dmg
cp -r $temp/mount/*.app /Applications
hdiutil detach $temp/mount
rm -rf $temp

# Install jMeter
fancy_echo "Installing jMeter..."
curl -s http://mirrors.ukfast.co.uk/sites/ftp.apache.org//jmeter/binaries/apache-jmeter-3.0.tgz | tar xvz -C $HOME

# Install MacDown
fancy_echo "Installing MacDown..."
curl -L -s https://github.com/uranusjr/macdown/releases/download/v0.6/MacDown.app.zip | tar xvz -C /Applications

# Configure Dock
fancy_echo "Configuring dock..."
/usr/libexec/PlistBuddy -c "Add :magnification bool true" ~/Library/Preferences/com.apple.dock.plist
/usr/libexec/PlistBuddy -c "Add :autohide bool true" ~/Library/Preferences/com.apple.dock.plist
/usr/libexec/PlistBuddy -c "Delete :persistent-apps" ~/Library/Preferences/com.apple.dock.plist
/usr/libexec/PlistBuddy -c "Add :persistent-apps array" ~/Library/Preferences/com.apple.dock.plist

# Add new applications to the dock
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Slack.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>'
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Mail.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>'
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Google Chrome.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>'
defaults write com.apple.dock persistent-apps -array-add '<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>/Applications/Atom.app</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>'
killall Dock

# Restart Finder
fancy_echo "Restarting Finder..."
killall Finder && open /System/Library/CoreServices/Finder.app

fancy_echo "Rebuilding font cache..."
echo $passwd | sudo -S -k atsutil databases -remove

# Build locate database
fancy_echo "Building locate database..."
echo $passwd | sudo -S -k launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
echo $passwd | sudo -S -k /usr/libexec/locate.updatedb
echo "Finished building locate database"

fancy_echo "Configuring terminal..."
# Set Terminal Colors
curl https://raw.githubusercontent.com/spartaglobal/laptop/master/assets/SpartaPro.terminal > "$HOME/SpartaPro.terminal"
open "$HOME/SpartaPro.terminal"
slep 10
osascript <<EOD
  tell application "Terminal"
    set default settings to settings set "SpartaPro"
    activate
  end tell
EOD

# Run Apple Update
fancy_echo "Updating macOS..."
echo $passwd | sudo -S -k softwareupdate -i -a

echo
fancy_echo "----------------------Local Setup Finished!----------------------"


# Clone and install Workstation VM
# fancy_echo "Installing Sparta Workstation..."
# git clone https://github.com/spartaglobal/sparta-workstation.git ~/sparta-workstation
# rm -rdf ~/sparta-workstation/.git ~/sparta-workstation/README.md
# cd ~/sparta-workstation && vagrant up

# Halt Vagrant VM and restart machine
# fancy_echo "----------------------DONE!----------------------"


echo
fancy_echo "*************************************************"
echo " Don't forget to install XCode from the App Store"
fancy_echo "*************************************************"

fancy_echo "Restarting..."
# vagrant halt && echo $passwd | sudo -S -k shutdown -r now "Restarting"
echo $passwd | sudo -S -k shutdown -r now "Restarting"

#Unset $passwd
unset passwd
